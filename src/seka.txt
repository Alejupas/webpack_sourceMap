0. pasikuriam nauja projekta prisidedam git ir github
git init ir is github create repository ir tas tris eilutes copy paste

0.5 inicializuot npm
npm init

1. instaliuojam webPack
npm install webpack webpack-cli --save-dev

2. create .gitignore and add to it node_modules, as well dist directory

3. susikuriam webpack.dev.js , uzpildom ji.

4. iskvieciam webpacka, paruosimas produkcijai:
sugeneruojam optimalius failus (is src) i viena: (folder dist, main.js):
 npx webpack --mode production

 5. pridedam webpack konfiguracijos faila: 
 pakeiciam scripta, kad start scriptas paleidzia dev konfiguration
    "start": "webpack --config webpack.dev.js"

6. HTML generavimo pluginas
https://webpack.js.org/plugins/html-webpack-plugin/
npm install --save-dev html-webpack-plugin
webpack.dev.js>>
const HtmlWebpackPlugin = require('html-webpack-plugin');
prie plugins   plugins: [new HtmlWebpackPlugin()],

inicijuojam plugina confige ir nurodom jam naudot musu template.html
plugins: [
    new HtmlWebpackPlugin({
      template: "./src/html/template.html",
    }),

    irasom title dinamiskai: 
     templateParameters:
     plugins: [
    new HtmlWebpackPlugin({
      template: "./src/html/template.html",
       title: "Now we know webpack.",
    }),
       

pasalinam komentarus is template.html kad nesimatytu index.html : 
plugins: [
    new HtmlWebpackPlugin({
      template: "./src/html/template.html",
      templateParameters: {
        title: "Now we know webpack.",
      },
      minify: {
        removeComments: true,
      },
    }),


  7.   CSS
    https://webpack.js.org/guides/asset-management/#loading-css
    npm install --save-dev style-loader css-loader
    koreguojam dev.js, kad css failam naudojam css loaderi
    modulyje taisykle: 
     rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],

    BABEL

    DEV SERVER

    IMG

    IMG COMPRESS
